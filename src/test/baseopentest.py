import unittest

from gnucashreport.gnucashdata import GNUCashData
import gnucashreport.cols as cols
from test.basetest import BaseTest

import decimal


# @unittest.skip('Skip open test')
class BaseOpenTest(BaseTest):
    """
    Шаблон для тестирования чтения данных из базы
    """

    # Список полей загруженных dataframe для проверки
    account_fields = ["name", "account_type",
                      "commodity_guid", "commodity_scu",
                      "parent_guid", "description", "hidden"]
    comm_fields = ["namespace", "mnemonic"]
    tr_fields = ["currency_guid", "post_date", "description"]
    split_fields = ["transaction_guid", "account_guid",
                    "memo", "reconcile_state", "value", "quantity"]
    price_fields = ["currency_guid", "source", "type", "value"]

    test_name = 'abstract_open_test'



    def test_fields(self):
        """
        Проверка имен столбцов прочитанных данных
        :return:
        """
        self.dataframe_fields_control(self.rep.df_accounts, self.account_fields, 'df_account sql ' + self.test_name)
        self.dataframe_fields_control(self.rep.df_commodities, self.comm_fields, 'df_commodities sql ' + self.test_name)
        self.dataframe_fields_control(self.rep.df_transactions, self.tr_fields, 'df_transactions sql ' + self.test_name)
        self.dataframe_fields_control(self.rep.df_prices, self.price_fields, 'df_prices sql ' + self.test_name)
        self.dataframe_fields_control(self.rep.df_splits, self.split_fields, 'df_splits sql ' + self.test_name)

    def test_decimal(self):

        value = self.rep.df_splits[cols.VALUE][0]
        self.assertIsInstance(value, decimal.Decimal, 'Splits value is decimal type')

    @unittest.skip("Skip open test")
    def test_prices(self):
        self.pickle_control(self.pickle_prices, self.rep.df_prices, 'df_prices ' + self.test_name)

    @unittest.skip("Skip open test")
    def test_accounts(self):
        self.pickle_control(self.pickle_accounts, self.rep.df_accounts, 'df_prices ' + self.test_name)

    @unittest.skip("Skip open test")
    def test_commodities(self):
        self.pickle_control(self.pickle_commodities, self.rep.df_commodities, 'df_commodities ' + self.test_name)

    @unittest.skip("Skip open test")
    def test_splits(self):
        self.pickle_control(self.pickle_splits, self.rep.df_splits, 'df_splits ' + self.test_name)

    @unittest.skip("Skip open test")
    def test_transactions(self):
        """
        Проверка самих данных
        :return:
        """
        self.pickle_control(self.pickle_tr, self.rep.df_transactions, 'df_transactions ' + self.test_name)
