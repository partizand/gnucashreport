import unittest
import os

import pandas
from pandas.util.testing import assert_frame_equal

from gcreports.gcreport import GCReport

class BaseOpenTest(object):
    """
    Шаблон для тестирования чтения данных из базы
    """

    rep = GCReport()
    # rep_xml = RepBuilder()

    account_fields = ["name", "account_type", 'mnemonic',
                      "commodity_guid", "commodity_scu",
                      "parent_guid", "description", "hidden"]

    comm_fields = ["namespace", "mnemonic"]
    tr_fields = ["currency_guid", "post_date", "description"]
    split_fields = ["transaction_guid", "account_guid",
                    "memo", "reconcile_state", "value", "quantity"]
    price_fields = ["commodity_guid", "currency_guid",
                    "date", "source", "type", "value"]

    test_name = 'abstract_open_test'

    dir_test = 'U:/test_data'

    pickle_prices = 'prices.pkl'
    pickle_splits = 'splits.pkl'
    pickle_accounts = 'accounts.pkl'
    pickle_tr = 'transactions.pkl'
    pickle_commodities = 'commodities.pkl'

    def test_fields(self):
        """
        Проверка имен столбцов прочитанных данных
        :return:
        """
        self.dataframe_fields_control(self.rep.df_accounts, self.account_fields, 'df_account sql ' + self.test_name)
        self.dataframe_fields_control(self.rep.df_commodities, self.comm_fields, 'df_commodities sql ' + self.test_name)
        self.dataframe_fields_control(self.rep.df_transactions, self.tr_fields, 'df_transactions sql ' + self.test_name)
        self.dataframe_fields_control(self.rep.df_prices, self.price_fields, 'df_prices sql ' + self.test_name)
        self.dataframe_fields_control(self.rep.df_splits, self.split_fields, 'df_splits sql ' + self.test_name)

    def test_loaded_df(self):
        """
        Проверка самих данных
        :return:
        """
        self.pickle_control(self.pickle_prices, self.rep.df_prices, 'df_prices ' + self.test_name)
        self.pickle_control(self.pickle_accounts, self.rep.df_accounts, 'df_prices ' + self.test_name)
        self.pickle_control(self.pickle_commodities, self.rep.df_commodities, 'df_commodities ' + self.test_name)
        self.pickle_control(self.pickle_splits, self.rep.df_splits, 'df_splits ' + self.test_name)
        self.pickle_control(self.pickle_tr, self.rep.df_transactions, 'df_transactions ' + self.test_name)

    def pickle_control(self, pickle_file, df_to_test, test_name=None):
        """
        Сверка dataframe c эталонным Pickle файлом
        :param pickle_file:
        :param df_to_test:
        :param test_name:
        :return:
        """
        filename = os.path.join(self.dir_test, pickle_file)
        df_etalon = pandas.read_pickle(filename)
        assert_frame_equal(df_to_test, df_etalon, check_like=True, obj=test_name)

    def dataframe_fields_control(self, df, etalon_fields, df_name):
        """
        Проверка что dataframe содержит колонки с заданными именами
        :param df:
        :param etalon_fields:
        :param df_name:
        :return:
        """
        cols = df.columns.values.tolist()
        for field in etalon_fields:
            self.assertIn(field, cols, 'DataFrame {} contain field {}. {}'.format(df_name, field, self.test_name))



